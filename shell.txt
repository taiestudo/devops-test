############ Part 1: Git CLI ############ 

1.Clone Node.js Bulletin Board APP repository

devops-test $git clone https://github.com/taiestudo/getting-started.git
Cloning into 'getting-started'...
remote: Enumerating objects: 923, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 923 (delta 0), reused 0 (delta 0), pack-reused 916 (from 1)
Receiving objects: 100% (923/923), 4.60 MiB | 3.97 MiB/s, done.
Resolving deltas: 100% (484/484), done.

2. Create a feature branch called develop

devops-test $git checkout -b develop
Switched to a new branch 'develop'

3. Modify the app to support configurable port via environment variable

4. Commit and push changes

devops-test $git add app/src/
devops-test $git commit -m "Add configurable port via environment variable
-Modified /app/src/index.js"
[develop ce04bb4] Add configurable port via environment variable -Modified /app/src/index.js
 1 file changed, 5 insertions(+), 2 deletions(-)
devops-test $git push origin develop
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 8 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 720 bytes | 720.00 KiB/s, done.
Total 5 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
remote: 
remote: Create a pull request for 'develop' on GitHub by visiting:
remote:      https://github.com/taiestudo/devops-test/pull/new/develop
remote: 
To https://github.com/taiestudo/devops-test.git
 * [new branch]      develop -> develop

 5. Simulate a merge conflict and resolve it

 devops-test $git switch main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
devops-test $git add app/src/
devops-test $git commit -m "Simulating a merge conflict"
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
devops-test $git add app/src/
devops-test $git commit -m "Simulating a merge conflict"
[main 0ce2761] Simulating a merge conflict
 1 file changed, 5 insertions(+), 2 deletions(-)
devops-test $git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
devops-test $git switch develop
Switched to branch 'develop'
devops-test $git merge main
Auto-merging app/src/index.js
CONFLICT (content): Merge conflict in app/src/index.js
Automatic merge failed; fix conflicts and then commit the result.
devops-test $git add app/src/index.js 
devops-test $git commit
[develop 9c1743b] Merge branch 'main' into develop

6. Use stash, switch branches, and re-apply changes

devops-test $git status
On branch develop
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app/src/index.js

no changes added to commit (use "git add" and/or "git commit -a")
devops-test $git add app/src/index.js 
devops-test $git stash
Saved working directory and index state WIP on develop: 9c1743b Merge branch 'main' into develop
devops-test $git switch main
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)
devops-test $git switch develop
Switched to branch 'develop'
devops-test $git stash pop
On branch develop
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app/src/index.js

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (37080841127593da5a7c4737cacea50acaf5cda0)
devops-test $git restore app/src/index.js

############ Part 2: Docker ############ 

 1. Optimize Dockerfile using a minimal base image

 2. Add .dockerignore

 3. Build and tag the image

devops-test $docker build -t bulletin-app:v1.0 .
[+] Building 2.9s (14/14) FINISHED                                                                                    docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                                                  0.0s
 => => transferring dockerfile: 735B                                                                                                  0.0s
 => [internal] load metadata for docker.io/library/node:20-alpine                                                                     2.1s
 => [auth] library/node:pull token for registry-1.docker.io                                                                           0.0s
 => [internal] load .dockerignore                                                                                                     0.0s
 => => transferring context: 247B                                                                                                     0.0s
 => [internal] load build context                                                                                                     0.0s
 => => transferring context: 3.30kB                                                                                                   0.0s
 => [builder 1/5] FROM docker.io/library/node:20-alpine@sha256:8bda036ddd59ea51a23bc1a1035d3b5c614e72c01366d989f4120e8adca196d4       0.1s
 => => resolve docker.io/library/node:20-alpine@sha256:8bda036ddd59ea51a23bc1a1035d3b5c614e72c01366d989f4120e8adca196d4               0.1s
 => CACHED [builder 2/5] WORKDIR /app                                                                                                 0.0s
 => CACHED [builder 3/5] COPY app/package.json app/yarn.lock ./                                                                       0.0s
 => CACHED [builder 4/5] RUN yarn install --production --frozen-lockfile                                                              0.0s
 => CACHED [builder 5/5] COPY app/src ./src                                                                                           0.0s
 => CACHED [production 3/5] COPY --from=builder /app/node_modules ./node_modules                                                      0.0s
 => CACHED [production 4/5] COPY --from=builder /app/src ./src                                                                        0.0s
 => CACHED [production 5/5] COPY app/package.json ./                                                                                  0.0s
 => exporting to image                                                                                                                0.3s
 => => exporting layers                                                                                                               0.0s
 => => exporting manifest sha256:f05248c14a4f36fbe6848d03afe655ef8a5006648ecf925fc1c8774dc6edd2f3                                     0.0s
 => => exporting config sha256:7b78c3445d4635114392a2b03a68768ff3d0a49444c9b98c4e96afc27a407bef                                       0.0s
 => => exporting attestation manifest sha256:e3309ee1e5c2435bf3661a88242ec83a3702f0696a2727f95d9e32d7f31bc871                         0.1s
 => => exporting manifest list sha256:8077bd7c5b682b26a13bbb09312dd59ff19ab399d83e4db6bc92ff549769882f                                0.0s
 => => naming to docker.io/library/bulletin-app:v1.0                                                                                  0.0s
 => => unpacking to docker.io/library/bulletin-app:v1.0   

 4. Run the container using env-based port

devops-test $docker run -dp 8080:8081 --name bulletin-container -e PORT=8081 bulletin-app:v1.0
0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd

5. Inspect container and image

devops-test $docker inspect bulletin-container
[
    {
        "Id": "0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd",
        "Created": "2025-03-31T19:01:31.854737561Z",
        "Path": "docker-entrypoint.sh",
        "Args": [
            "node",
            "src/index.js"
        ],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 4240,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2025-03-31T19:01:32.048637743Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:8077bd7c5b682b26a13bbb09312dd59ff19ab399d83e4db6bc92ff549769882f",
        "ResolvConfPath": "/var/lib/docker/containers/0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd/hostname",
        "HostsPath": "/var/lib/docker/containers/0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd/hosts",
        "LogPath": "/var/lib/docker/containers/0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd/0ba7c38f77daaf0406a614880191daff97c139bbb6d42dcc254f56fc7edccbbd-json.log",
        "Name": "/bulletin-container",
        "RestartCount": 0,
        "Driver": "overlayfs",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "bridge",
            "PortBindings": {
                "8081/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "8080"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "ConsoleSize": [
                9,
                139
            ],
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "private",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": [],
            "BlkioDeviceWriteBps": [],
            "BlkioDeviceReadIOps": [],
            "BlkioDeviceWriteIOps": [],
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": null,
            "PidsLimit": null,
            "Ulimits": [],
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware",
                "/sys/devices/virtual/powercap"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": null,
            "Name": "overlayfs"
        },
        "Mounts": [],
        "Config": {
            "Hostname": "0ba7c38f77da",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "8081/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PORT=8081",
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NODE_VERSION=20.19.0",
                "YARN_VERSION=1.22.22"
            ],
            "Cmd": [
                "node",
                "src/index.js"
            ],
            "Image": "bulletin-app:v1.0",
            "Volumes": null,
            "WorkingDir": "/app",
            "Entrypoint": [
                "docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {}
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "112ac88c0979195d958d7aa5fabe51b9baa3bf350c2c70cc7bb84488e639cc7d",
            "SandboxKey": "/var/run/docker/netns/112ac88c0979",
            "Ports": {
                "8081/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "8080"
                    }
                ]
            },
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "69de0fda70d67a2a71812f664fced4869613240e84f3beb5aec4557de4a38758",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "c6:2f:12:f9:25:65",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "MacAddress": "c6:2f:12:f9:25:65",
                    "DriverOpts": null,
                    "GwPriority": 0,
                    "NetworkID": "f4d41363491e2ac96823585f77690027600936264758eaaddd0025b10577a5e2",
                    "EndpointID": "69de0fda70d67a2a71812f664fced4869613240e84f3beb5aec4557de4a38758",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "DNSNames": null
                }
            }
        },
        "ImageManifestDescriptor": {
            "mediaType": "application/vnd.oci.image.manifest.v1+json",
            "digest": "sha256:f05248c14a4f36fbe6848d03afe655ef8a5006648ecf925fc1c8774dc6edd2f3",
            "size": 1813,
            "platform": {
                "architecture": "amd64",
                "os": "linux"
            }
        }
    }
]

devops-test $docker inspect bulletin-app:v1.0
[
    {
        "Id": "sha256:8077bd7c5b682b26a13bbb09312dd59ff19ab399d83e4db6bc92ff549769882f",
        "RepoTags": [
            "bulletin-app:v1.0"
        ],
        "RepoDigests": [
            "bulletin-app@sha256:8077bd7c5b682b26a13bbb09312dd59ff19ab399d83e4db6bc92ff549769882f"
        ],
        "Parent": "",
        "Comment": "buildkit.dockerfile.v0",
        "Created": "2025-03-31T01:46:20.31799508Z",
        "DockerVersion": "",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "8081/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NODE_VERSION=20.19.0",
                "YARN_VERSION=1.22.22"
            ],
            "Cmd": [
                "node",
                "src/index.js"
            ],
            "ArgsEscaped": true,
            "Image": "",
            "Volumes": null,
            "WorkingDir": "/app",
            "Entrypoint": [
                "docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": null
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 56475567,
        "GraphDriver": {
            "Data": null,
            "Name": "overlayfs"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:08000c18d16dadf9553d747a58cf44023423a9ab010aab96cf263d2216b8b350",
                "sha256:4f35fe5263c773129f4dac6349a5acb24173fa4ba546afd7e6b2654320dc2ccd",
                "sha256:31d5ff869df5b755ccfecbe1680ce3908d49b5e25f0418db50d37e14975c5174",
                "sha256:71966995f05c1fbc5fbd7171fb8bb17e0fe37bef6c60c5d60ddfad59c116bfa0",
                "sha256:c9a90760b796380dcd4d90a1a70a580618c36f8622a2826546a1290585454714",
                "sha256:4a759282ca352491944014c348c1e930a79f3fd9c4b858ff7e54260fd297d915",
                "sha256:3ba1c6f50a04d8461410aa93558f395f8d3df163e66e6aef049943e5fb21cda1",
                "sha256:bb7e69b794bf3defe9901db7240556540c3767dd7fb1e6c030d03c66261be203"
            ]
        },
        "Metadata": {
            "LastTagTime": "2025-03-31T19:01:07.553187727Z"
        },
        "Descriptor": {
            "mediaType": "application/vnd.oci.image.index.v1+json",
            "digest": "sha256:8077bd7c5b682b26a13bbb09312dd59ff19ab399d83e4db6bc92ff549769882f",
            "size": 856
        }
    }
]

6. Show container logs

devops-test $docker logs bulletin-container
Using sqlite database at /etc/todos/todo.db
App listening on port 8081

############ Part 3: Kubernetes Deployment ############ 

1. Create Deployment, Service and Ingress manifests

2. Use environment variable for port in Deployment

3. Deploy with kubectl

##INSTALL NGINX INGRESS

devops-test $helm upgrade --install ingress-nginx ingress-nginx \
  --repo https://kubernetes.github.io/ingress-nginx \
  --namespace ingress-nginx --create-namespace
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Mon Mar 31 16:06:52 2025
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

  devops-test $cd app/k8s/
k8s $kubectl apply -f deployment.yaml
deployment.apps/bulletin-deployment created
k8s $kubectl apply -f services.yaml
service/bulletin-service created
k8s $kubectl apply -f ingress.yaml 
ingress.networking.k8s.io/bulletin-ingress created

4. Test app access via Ingress

http://localhost/

5. Access the container shell and show container disk free space

k8s $kubectl get pods
NAME                                   READY   STATUS    RESTARTS   AGE
bulletin-deployment-659bfc9455-n7hgt   1/1     Running   0          46s
k8s $kubectl exec -it bulletin-deployment-659bfc9455-n7hgt -- sh
/app # df -h
Filesystem                Size      Used Available Use% Mounted on
overlay                1006.9G      5.0G    950.6G   1% /
tmpfs                    64.0M         0     64.0M   0% /dev
shm                      64.0M         0     64.0M   0% /dev/shm
/dev/vda1              1006.9G      5.0G    950.6G   1% /dev/termination-log
/dev/vda1              1006.9G      5.0G    950.6G   1% /etc/resolv.conf
/dev/vda1              1006.9G      5.0G    950.6G   1% /etc/hostname
/dev/vda1              1006.9G      5.0G    950.6G   1% /etc/hosts
tmpfs                     3.4G     12.0K      3.4G   0% /run/secrets/kubernetes.io/serviceaccount
tmpfs                     1.7G         0      1.7G   0% /proc/acpi
tmpfs                    64.0M         0     64.0M   0% /proc/kcore
tmpfs                    64.0M         0     64.0M   0% /proc/keys
tmpfs                    64.0M         0     64.0M   0% /proc/timer_list
tmpfs                     1.7G         0      1.7G   0% /sys/firmware
/app # exit

6. Show container logs

k8s $kubectl logs bulletin-deployment-659bfc9455-n7hgt
Using sqlite database at /etc/todos/todo.db
App listening on port 8081

7. Show deployed deployment yaml

k8s $kubectl get deployment bulletin-deployment -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"bulletin"},"name":"bulletin-deployment","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"bulletin"}},"template":{"metadata":{"labels":{"app":"bulletin"}},"spec":{"containers":[{"env":[{"name":"PORT","value":"8081"}],"image":"bulletin-app:v1.0","imagePullPolicy":"IfNotPresent","name":"bulletin-app","ports":[{"containerPort":8081}]}]}}}}
  creationTimestamp: "2025-03-31T19:10:53Z"
  generation: 1
  labels:
    app: bulletin
  name: bulletin-deployment
  namespace: default
  resourceVersion: "79095"
  uid: f975434d-21af-4eb4-af69-74c7ccd3e978
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: bulletin
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: bulletin
    spec:
      containers:
      - env:
        - name: PORT
          value: "8081"
        image: bulletin-app:v1.0
        imagePullPolicy: IfNotPresent
        name: bulletin-app
        ports:
        - containerPort: 8081
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2025-03-31T19:10:55Z"
    lastUpdateTime: "2025-03-31T19:10:55Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2025-03-31T19:10:53Z"
    lastUpdateTime: "2025-03-31T19:10:55Z"
    message: ReplicaSet "bulletin-deployment-659bfc9455" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

  ############ Part 4. Helm Chart ############ 

1. Create Helm chart

app $helm create bulletin-chart
Creating bulletin-chart

2. Template Deployment, Service, Ingress

3. Parametrize image, port, replicas and ingress path

4. Install and upgrade Helm release local after change values

app $helm install bulletin-release ./bulletin-chart
NAME: bulletin-release
LAST DEPLOYED: Mon Mar 31 16:16:18 2025
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
1. Get the application URL by running these commands:
  http://bulletin-chart.local/

############ Part 5: AWS Service ############ 

1. Create S3 bucket and enable versioning

devops-test $aws s3 mb s3://bulletin-board-app-tai --region us-east-1
make_bucket: bulletin-board-app-tai
devops-test $aws s3api put-bucket-versioning --bucket bulletin-board-app-tai --versioning-configuration Status=Enabled --region us-east-1

2. Upload file to bucket

devops-test $aws s3 cp bucket-file.txt s3://bulletin-board-app-tai/bucket-file.txt --region us-east-1
upload: ./bucket-file.txt to s3://bulletin-board-app-tai/bucket-file.txt

3.Launch EC2 instance in specific VPC and attach Security Group

devops-test $aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text --region us-east-1
vpc-0159261f980ab4029

devops-test $aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0159261f980ab4029" --query "Subnets[0].SubnetId" --output text --region us-east-1
subnet-03f93be6a2a58c3a0

devops-test $aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0159261f980ab4029" --query "Subnets[0].SubnetId" --output text --region us-east-1
subnet-03f93be6a2a58c3a0
devops-test $aws ec2 create-security-group --group-name "bulletin-sg" \
    --description "Allow SSH" \
    --vpc-id vpc-0159261f980ab4029 \
    --query 'GroupId' --output text \
    --region us-east-1
sg-0afaeee2ae26abb7c

devops-test $aws ec2 authorize-security-group-ingress --group-id sg-0afaeee2ae26abb7c    --protocol tcp --port 22 --cidr 193.186.4.200/32     --region us-east-1
{
    "Return": true,
    "SecurityGroupRules": [
        {
            "SecurityGroupRuleId": "sgr-0fd5c90e3335875b8",
            "GroupId": "sg-0afaeee2ae26abb7c",
            "GroupOwnerId": "054183072842",
            "IsEgress": false,
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIpv4": "193.186.4.200/32",
            "SecurityGroupRuleArn": "arn:aws:ec2:us-east-1:054183072842:security-group-rule/sgr-0fd5c90e3335875b8"
        }
    ]
}

##Search free tier ami from AWS EC2 Dashboard##

devops-teste $aws ec2 create-key-pair \
    --key-name "bulletin-key-pair" \
    --query 'KeyMaterial' \
    --output text > bulletin-key-pair.pem
devops-teste $chmod 400 bulletin-key-pair.pem
devops-teste $mv bulletin-key-pair.pem ~/.ssh

devops-test $aws ec2 run-instances \
    --image-id ami-071226ecf16aa7d96 \
    --instance-type t2.micro \
    --key-name "bulletin-key-pair" \
    --security-group-ids sg-0afaeee2ae26abb7c \
    --subnet-id subnet-03f93be6a2a58c3a0 \
    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Bulletin-EC2}]' \
    --region us-east-1 \
    --query 'Instances[0].InstanceId' --output text
i-0f82c1b8af922e592

4. List EC2 instances, S3 buckets and IAM UsernsMode

INSTANCE

devops-test $aws ec2 describe-instances --instance-ids i-0f82c1b8af922e592
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "AttachTime": "2025-03-31T19:38:35+00:00",
:...skipping...
{
    "Reservations": [
        {
            "ReservationId": "r-0cf94a2007363468a",
            "OwnerId": "054183072842",
            "Groups": [],
            "Instances": [
                {
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "AttachTime": "2025-03-31T19:38:35+00:00",
                                "DeleteOnTermination": true,
                                "Status": "attached",
                                "VolumeId": "vol-0ec792b4ea2fe4160"
                            }
                        }
                    ],
                    "ClientToken": "263865dc-92c4-4a6f-8245-c6d9e0457fda",
                    "EbsOptimized": false,
                    "EnaSupport": true,
                    "Hypervisor": "xen",
                    "NetworkInterfaces": [
                        {
                            "Association": {
                                "IpOwnerId": "amazon",
                                "PublicDnsName": "ec2-100-28-227-22.compute-1.amazonaws.com",
                                "PublicIp": "100.28.227.22"
                            },
                            "Attachment": {
                                "AttachTime": "2025-03-31T19:38:35+00:00",
                                "AttachmentId": "eni-attach-03d8dc10e8fa593f9",
                                "DeleteOnTermination": true,
                                "DeviceIndex": 0,
                                "Status": "attached",
                                "NetworkCardIndex": 0
                            },
                            "Description": "",
                            "Groups": [
                                {
                                    "GroupId": "sg-0afaeee2ae26abb7c",
                                    "GroupName": "bulletin-sg"
                                }
                            ],
                            "Ipv6Addresses": [],
                            "MacAddress": "16:ff:f4:05:3e:f9",
                            "NetworkInterfaceId": "eni-0143a2dabaa9296b0",
                            "OwnerId": "054183072842",
                            "PrivateDnsName": "ip-172-31-76-146.ec2.internal",
                            "PrivateIpAddress": "172.31.76.146",
                            "PrivateIpAddresses": [
                                {
                                    "Association": {
                                        "IpOwnerId": "amazon",
                                        "PublicDnsName": "ec2-100-28-227-22.compute-1.amazonaws.com",
                                        "PublicIp": "100.28.227.22"
                                    },
                                    "Primary": true,
                                    "PrivateDnsName": "ip-172-31-76-146.ec2.internal",
                                    "PrivateIpAddress": "172.31.76.146"
                                }
                            ],
                            "SourceDestCheck": true,
                            "Status": "in-use",
                            "SubnetId": "subnet-03f93be6a2a58c3a0",
                            "VpcId": "vpc-0159261f980ab4029",
                            "InterfaceType": "interface",
                            "Operator": {
                                "Managed": false
                            }
                        }
                    ],
                    "RootDeviceName": "/dev/xvda",
                    "RootDeviceType": "ebs",
                    "SecurityGroups": [
                        {
                            "GroupId": "sg-0afaeee2ae26abb7c",
                            "GroupName": "bulletin-sg"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Tags": [
                        {
                            "Key": "Name",
                            "Value": "Bulletin-EC2"
                        }
                    ],
                    "VirtualizationType": "hvm",
                    "CpuOptions": {
                        "CoreCount": 1,
                        "ThreadsPerCore": 1
                    },
                    "CapacityReservationSpecification": {
                        "CapacityReservationPreference": "open"
                    },
                    "HibernationOptions": {
                        "Configured": false
                    },
                    "MetadataOptions": {
                        "State": "applied",
                        "HttpTokens": "required",
                        "HttpPutResponseHopLimit": 2,
                        "HttpEndpoint": "enabled",
                        "HttpProtocolIpv6": "disabled",
                        "InstanceMetadataTags": "disabled"
                    },
                    "EnclaveOptions": {
                        "Enabled": false
                    },
                    "BootMode": "uefi-preferred",
                    "PlatformDetails": "Linux/UNIX",
                    "UsageOperation": "RunInstances",
                    "UsageOperationUpdateTime": "2025-03-31T19:38:35+00:00",
                    "PrivateDnsNameOptions": {
                        "HostnameType": "ip-name",
                        "EnableResourceNameDnsARecord": false,
                        "EnableResourceNameDnsAAAARecord": false
                    },
                    "MaintenanceOptions": {
                        "AutoRecovery": "default"
                    },
                    "CurrentInstanceBootMode": "legacy-bios",
                    "NetworkPerformanceOptions": {
                        "BandwidthWeighting": "default"
                    },
                    "Operator": {
                        "Managed": false
                    },
                    "InstanceId": "i-0f82c1b8af922e592",
                    "ImageId": "ami-071226ecf16aa7d96",
                    "State": {
                        "Code": 16,
                        "Name": "running"
                    },
                    "PrivateDnsName": "ip-172-31-76-146.ec2.internal",
                    "PublicDnsName": "ec2-100-28-227-22.compute-1.amazonaws.com",
                    "StateTransitionReason": "",
                    "KeyName": "bulletin-key-pair",
                    "AmiLaunchIndex": 0,
                    "ProductCodes": [],
                    "InstanceType": "t2.micro",
                    "LaunchTime": "2025-03-31T19:38:35+00:00",
                    "Placement": {
                        "GroupName": "",
                        "Tenancy": "default",
                        "AvailabilityZone": "us-east-1f"
                    },
                    "Monitoring": {
                        "State": "disabled"
                    },
                    "SubnetId": "subnet-03f93be6a2a58c3a0",
                    "VpcId": "vpc-0159261f980ab4029",
                    "PrivateIpAddress": "172.31.76.146",
                    "PublicIpAddress": "100.28.227.22"
                }
            ]
        }
    ]
}

S3

devops-test $aws s3 ls s3://bulletin-board-app-tai/
2025-03-31 16:30:08         12 bucket-file.txt

IAM

devops-test $aws iam list-users
{
    "Users": [
        {
            "Path": "/",
            "UserName": "admin",
            "UserId": "AIDAQZHMQCRFPKP64LMNZ",
            "Arn": "arn:aws:iam::054183072842:user/admin",
            "CreateDate": "2025-03-24T19:28:13+00:00",
            "PasswordLastUsed": "2025-03-31T19:24:36+00:00"
        },
        {
            "Path": "/",
            "UserName": "taiadmin",
            "UserId": "AIDAQZHMQCRFEU54LPTIK",
            "Arn": "arn:aws:iam::054183072842:user/taiadmin",
            "CreateDate": "2025-03-24T19:26:42+00:00"
        }
    ]
}

############ Part 6: Terraform ############ 

1. Create VPC (10.0.0.0/16)
2. Create 2 public subnets in different AZs
3. Tag all resources (e.g., environment = dev)
4. Launch t2.micro EC2 instance with SSH access open to the Internet and access the ec2 and show disk free space

terraform $terraform init
Initializing the backend...
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.93.0...
- Installed hashicorp/aws v5.93.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

terraform $terraform validate
Success! The configuration is valid.

terraform $terraform plan
data.aws_ami.amazon_linux_2: Reading...
data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
data.aws_ami.amazon_linux_2: Read complete after 2s [id=ami-072e42fd77921edac]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.bulletin-server will be created
  + resource "aws_instance" "bulletin-server" {
      + ami                                  = "ami-072e42fd77921edac"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "bulletin-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-server"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-server"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.bulletin-igw will be created
  + resource "aws_internet_gateway" "bulletin-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.bulletin-route-table will be created
  + resource "aws_route_table" "bulletin-route-table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-rtb"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.rtb-subnet[0] will be created
  + resource "aws_route_table_association" "rtb-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.rtb-subnet[1] will be created
  + resource "aws_route_table_association" "rtb-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.bulletin-sg will be created
  + resource "aws_security_group" "bulletin-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.bulletin-sb[0] will be created
  + resource "aws_subnet" "bulletin-sb" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.bulletin-sb[1] will be created
  + resource "aws_subnet" "bulletin-sb" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.bulletin-vpc will be created
  + resource "aws_vpc" "bulletin-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id        = (known after apply)
  + instance_public_ip = (known after apply)
  + public_subnet_ids  = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id             = (known after apply)

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform
apply" now.

terraform $terraform apply
data.aws_ami.amazon_linux_2: Reading...
data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
data.aws_ami.amazon_linux_2: Read complete after 2s [id=ami-072e42fd77921edac]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.bulletin-server will be created
  + resource "aws_instance" "bulletin-server" {
      + ami                                  = "ami-072e42fd77921edac"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "bulletin-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-server"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-server"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.bulletin-igw will be created
  + resource "aws_internet_gateway" "bulletin-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.bulletin-route-table will be created
  + resource "aws_route_table" "bulletin-route-table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-rtb"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.rtb-subnet[0] will be created
  + resource "aws_route_table_association" "rtb-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.rtb-subnet[1] will be created
  + resource "aws_route_table_association" "rtb-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.bulletin-sg will be created
  + resource "aws_security_group" "bulletin-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "dev"
          + "Name"        = "dev-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Name"        = "dev-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.bulletin-sb[0] will be created
  + resource "aws_subnet" "bulletin-sb" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.bulletin-sb[1] will be created
  + resource "aws_subnet" "bulletin-sb" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "Name"        = "dev-sb"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.bulletin-vpc will be created
  + resource "aws_vpc" "bulletin-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-vpc"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id        = (known after apply)
  + instance_public_ip = (known after apply)
  + public_subnet_ids  = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id             = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.bulletin-vpc: Creating...
aws_vpc.bulletin-vpc: Creation complete after 4s [id=vpc-02b5f08d47a1727dc]
aws_internet_gateway.bulletin-igw: Creating...
aws_subnet.bulletin-sb[1]: Creating...
aws_subnet.bulletin-sb[0]: Creating...
aws_security_group.bulletin-sg: Creating...
aws_internet_gateway.bulletin-igw: Creation complete after 1s [id=igw-088a34e61dbedd3f4]
aws_route_table.bulletin-route-table: Creating...
aws_route_table.bulletin-route-table: Creation complete after 3s [id=rtb-0beace5fa95ae591f]
aws_security_group.bulletin-sg: Creation complete after 5s [id=sg-0bf99bf65dfdcdfbc]
aws_subnet.bulletin-sb[1]: Still creating... [10s elapsed]
aws_subnet.bulletin-sb[0]: Still creating... [10s elapsed]
aws_subnet.bulletin-sb[1]: Creation complete after 13s [id=subnet-0384456087648f371]
aws_subnet.bulletin-sb[0]: Creation complete after 13s [id=subnet-0f7a5d559070aaf1e]
aws_route_table_association.rtb-subnet[1]: Creating...
aws_route_table_association.rtb-subnet[0]: Creating...
aws_instance.bulletin-server: Creating...
aws_route_table_association.rtb-subnet[1]: Creation complete after 1s [id=rtbassoc-0b565018d6951eaa5]
aws_route_table_association.rtb-subnet[0]: Creation complete after 1s [id=rtbassoc-0312acd01132513b9]
aws_instance.bulletin-server: Still creating... [10s elapsed]
aws_instance.bulletin-server: Creation complete after 16s [id=i-0cebda7bcf82a8257]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.

Outputs:

instance_id = "i-0cebda7bcf82a8257"
instance_public_ip = "54.198.228.239"
public_subnet_ids = [
  "subnet-0f7a5d559070aaf1e",
  "subnet-0384456087648f371",
]
vpc_id = "vpc-02b5f08d47a1727dc"

terraform $ssh -i ~/.ssh/bulletin-key-pair.pem ec2-user@54.198.228.239
The authenticity of host '54.198.228.239 (54.198.228.239)' can't be established.
ED25519 key fingerprint is SHA256:r2qFWMLJNLdaM5zUtQZu/T6tqg8Ij82/aYHy+TuRRD4.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '54.198.228.239' (ED25519) to the list of known hosts.
   ,     #_
   ~\_  ####_        Amazon Linux 2
  ~~  \_#####\
  ~~     \###|       AL2 End of Life is 2026-06-30.
  ~~       \#/ ___
   ~~       V~' '->
    ~~~         /    A newer version of Amazon Linux is available!
      ~~._.   _/
         _/ _/       Amazon Linux 2023, GA and supported until 2028-03-15.
       _/m/'           https://aws.amazon.com/linux/amazon-linux-2023/

[ec2-user@ip-10-0-1-95 ~]$ df -h
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        477M     0  477M   0% /dev
tmpfs           486M     0  486M   0% /dev/shm
tmpfs           486M  408K  485M   1% /run
tmpfs           486M     0  486M   0% /sys/fs/cgroup
/dev/xvda1      8,0G  1,7G  6,4G  21% /
tmpfs            98M     0   98M   0% /run/user/1000
[ec2-user@ip-10-0-1-95 ~]$ exit
logout
Connection to 54.198.228.239 closed.

5. Output VPC ID, subnet IDs, and instance public IP

instance_id = "i-0cebda7bcf82a8257"
instance_public_ip = "54.198.228.239"
public_subnet_ids = [
  "subnet-0f7a5d559070aaf1e",
  "subnet-0384456087648f371",
]
vpc_id = "vpc-02b5f08d47a1727dc"

6. Destroy all resources

terraform $terraform destroy
data.aws_availability_zones.available: Reading...
data.aws_ami.amazon_linux_2: Reading...
aws_vpc.bulletin-vpc: Refreshing state... [id=vpc-02b5f08d47a1727dc]
data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
aws_internet_gateway.bulletin-igw: Refreshing state... [id=igw-088a34e61dbedd3f4]
aws_subnet.bulletin-sb[0]: Refreshing state... [id=subnet-0f7a5d559070aaf1e]
aws_subnet.bulletin-sb[1]: Refreshing state... [id=subnet-0384456087648f371]
aws_security_group.bulletin-sg: Refreshing state... [id=sg-0bf99bf65dfdcdfbc]
aws_route_table.bulletin-route-table: Refreshing state... [id=rtb-0beace5fa95ae591f]
aws_route_table_association.rtb-subnet[1]: Refreshing state... [id=rtbassoc-0b565018d6951eaa5]
aws_route_table_association.rtb-subnet[0]: Refreshing state... [id=rtbassoc-0312acd01132513b9]
data.aws_ami.amazon_linux_2: Read complete after 3s [id=ami-072e42fd77921edac]
aws_instance.bulletin-server: Refreshing state... [id=i-0cebda7bcf82a8257]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.bulletin-server will be destroyed
  - resource "aws_instance" "bulletin-server" {
      - ami                                  = "ami-072e42fd77921edac" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:054183072842:instance/i-0cebda7bcf82a8257" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0cebda7bcf82a8257" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "bulletin-key-pair" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-030b6ac3f343810fe" -> null
      - private_dns                          = "ip-10-0-1-95.ec2.internal" -> null
      - private_ip                           = "10.0.1.95" -> null
      - public_ip                            = "54.198.228.239" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0f7a5d559070aaf1e" -> null
      - tags                                 = {
          - "Environment" = "dev"
          - "Name"        = "dev-server"
        } -> null
      - tags_all                             = {
          - "Environment" = "dev"
          - "Name"        = "dev-server"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0bf99bf65dfdcdfbc",
        ] -> null
        # (8 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-0a64e911991bb3055" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
            # (1 unchanged attribute hidden)
        }
    }

  # aws_internet_gateway.bulletin-igw will be destroyed
  - resource "aws_internet_gateway" "bulletin-igw" {
      - arn      = "arn:aws:ec2:us-east-1:054183072842:internet-gateway/igw-088a34e61dbedd3f4" -> null
      - id       = "igw-088a34e61dbedd3f4" -> null
      - owner_id = "054183072842" -> null
      - tags     = {
          - "Environment" = "dev"
          - "Name"        = "dev-igw"
        } -> null
      - tags_all = {
          - "Environment" = "dev"
          - "Name"        = "dev-igw"
        } -> null
      - vpc_id   = "vpc-02b5f08d47a1727dc" -> null
    }

  # aws_route_table.bulletin-route-table will be destroyed
  - resource "aws_route_table" "bulletin-route-table" {
      - arn              = "arn:aws:ec2:us-east-1:054183072842:route-table/rtb-0beace5fa95ae591f" -> null
      - id               = "rtb-0beace5fa95ae591f" -> null
      - owner_id         = "054183072842" -> null
      - propagating_vgws = [] -> null
      - route            = [
          - {
              - cidr_block                 = "0.0.0.0/0"
              - gateway_id                 = "igw-088a34e61dbedd3f4"
                # (11 unchanged attributes hidden)
            },
        ] -> null
      - tags             = {
          - "Environment" = "dev"
          - "Name"        = "dev-rtb"
        } -> null
      - tags_all         = {
          - "Environment" = "dev"
          - "Name"        = "dev-rtb"
        } -> null
      - vpc_id           = "vpc-02b5f08d47a1727dc" -> null
    }

  # aws_route_table_association.rtb-subnet[0] will be destroyed
  - resource "aws_route_table_association" "rtb-subnet" {
      - id             = "rtbassoc-0312acd01132513b9" -> null
      - route_table_id = "rtb-0beace5fa95ae591f" -> null
      - subnet_id      = "subnet-0f7a5d559070aaf1e" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_route_table_association.rtb-subnet[1] will be destroyed
  - resource "aws_route_table_association" "rtb-subnet" {
      - id             = "rtbassoc-0b565018d6951eaa5" -> null
      - route_table_id = "rtb-0beace5fa95ae591f" -> null
      - subnet_id      = "subnet-0384456087648f371" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_security_group.bulletin-sg will be destroyed
  - resource "aws_security_group" "bulletin-sg" {
      - arn                    = "arn:aws:ec2:us-east-1:054183072842:security-group/sg-0bf99bf65dfdcdfbc" -> null
      - description            = "Managed by Terraform" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ] -> null
      - id                     = "sg-0bf99bf65dfdcdfbc" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ] -> null
      - name                   = "terraform-20250331195032114200000001" -> null
      - name_prefix            = "terraform-" -> null
      - owner_id               = "054183072842" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {
          - "Environment" = "dev"
          - "Name"        = "dev-sg"
        } -> null
      - tags_all               = {
          - "Environment" = "dev"
          - "Name"        = "dev-sg"
        } -> null
      - vpc_id                 = "vpc-02b5f08d47a1727dc" -> null
    }

  # aws_subnet.bulletin-sb[0] will be destroyed
  - resource "aws_subnet" "bulletin-sb" {
      - arn                                            = "arn:aws:ec2:us-east-1:054183072842:subnet/subnet-0f7a5d559070aaf1e" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az4" -> null
      - cidr_block                                     = "10.0.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0f7a5d559070aaf1e" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "054183072842" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "dev"
          - "Name"        = "dev-sb"
        } -> null
      - tags_all                                       = {
          - "Environment" = "dev"
          - "Name"        = "dev-sb"
        } -> null
      - vpc_id                                         = "vpc-02b5f08d47a1727dc" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_subnet.bulletin-sb[1] will be destroyed
  - resource "aws_subnet" "bulletin-sb" {
      - arn                                            = "arn:aws:ec2:us-east-1:054183072842:subnet/subnet-0384456087648f371" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az6" -> null
      - cidr_block                                     = "10.0.2.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0384456087648f371" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "054183072842" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Environment" = "dev"
          - "Name"        = "dev-sb"
        } -> null
      - tags_all                                       = {
          - "Environment" = "dev"
          - "Name"        = "dev-sb"
        } -> null
      - vpc_id                                         = "vpc-02b5f08d47a1727dc" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_vpc.bulletin-vpc will be destroyed
  - resource "aws_vpc" "bulletin-vpc" {
      - arn                                  = "arn:aws:ec2:us-east-1:054183072842:vpc/vpc-02b5f08d47a1727dc" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-09397a27bfce20113" -> null
      - default_route_table_id               = "rtb-088c8683c009d8ab8" -> null
      - default_security_group_id            = "sg-0ac89eac19703c6c4" -> null
      - dhcp_options_id                      = "dopt-010e32fc52baa9e53" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-02b5f08d47a1727dc" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-088c8683c009d8ab8" -> null
      - owner_id                             = "054183072842" -> null
      - tags                                 = {
          - "Environment" = "dev"
          - "Name"        = "dev-vpc"
        } -> null
      - tags_all                             = {
          - "Environment" = "dev"
          - "Name"        = "dev-vpc"
        } -> null
        # (4 unchanged attributes hidden)
    }

Plan: 0 to add, 0 to change, 9 to destroy.

Changes to Outputs:
  - instance_id        = "i-0cebda7bcf82a8257" -> null
  - instance_public_ip = "54.198.228.239" -> null
  - public_subnet_ids  = [
      - "subnet-0f7a5d559070aaf1e",
      - "subnet-0384456087648f371",
    ] -> null
  - vpc_id             = "vpc-02b5f08d47a1727dc" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_route_table_association.rtb-subnet[1]: Destroying... [id=rtbassoc-0b565018d6951eaa5]
aws_route_table_association.rtb-subnet[0]: Destroying... [id=rtbassoc-0312acd01132513b9]
aws_instance.bulletin-server: Destroying... [id=i-0cebda7bcf82a8257]
aws_route_table_association.rtb-subnet[0]: Destruction complete after 2s
aws_route_table_association.rtb-subnet[1]: Destruction complete after 2s
aws_route_table.bulletin-route-table: Destroying... [id=rtb-0beace5fa95ae591f]
aws_route_table.bulletin-route-table: Destruction complete after 1s
aws_instance.bulletin-server: Still destroying... [id=i-0cebda7bcf82a8257, 10s elapsed]
aws_instance.bulletin-server: Still destroying... [id=i-0cebda7bcf82a8257, 20s elapsed]
aws_instance.bulletin-server: Still destroying... [id=i-0cebda7bcf82a8257, 30s elapsed]
aws_instance.bulletin-server: Still destroying... [id=i-0cebda7bcf82a8257, 40s elapsed]
aws_instance.bulletin-server: Destruction complete after 43s
aws_internet_gateway.bulletin-igw: Destroying... [id=igw-088a34e61dbedd3f4]
aws_subnet.bulletin-sb[0]: Destroying... [id=subnet-0f7a5d559070aaf1e]
aws_subnet.bulletin-sb[1]: Destroying... [id=subnet-0384456087648f371]
aws_security_group.bulletin-sg: Destroying... [id=sg-0bf99bf65dfdcdfbc]
aws_internet_gateway.bulletin-igw: Destruction complete after 2s
aws_subnet.bulletin-sb[1]: Destruction complete after 2s
aws_subnet.bulletin-sb[0]: Destruction complete after 2s
aws_security_group.bulletin-sg: Destruction complete after 2s
aws_vpc.bulletin-vpc: Destroying... [id=vpc-02b5f08d47a1727dc]
aws_vpc.bulletin-vpc: Destruction complete after 1s

Destroy complete! Resources: 9 destroyed.

############ Part 7: CI/CD Pipeline Design ############ 

1. Build Docker image on push
2. Push to container registry

